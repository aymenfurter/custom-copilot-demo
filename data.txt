# Directory Structure and Matching Files

## ./webpack.config.js

```
javascript
```

```
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: 'index.html',
    }),
  ],
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  devServer: {
    contentBase: './dist',
    historyApiFallback: true,
    compress: true,
    port: 8080,
  },
};```

## ./src/api/openai.js

```
javascript
```

```
export const generateCodeSuggestion = async (prompt, context, apiKey) => {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'You are a helpful assistant that provides code suggestions.',
          },
          {
            role: 'user',
            content: `Generate code suggestion for the following prompt:\n\n${prompt}\n\nContext:\n${context}`,
          },
        ],
        max_tokens: 100,
        n: 1,
        stop: null,
        temperature: 0.7,
      }),
    });

    const data = await response.json();

    if (data.error) {
      console.error('Error generating code suggestion:', data.error);
      return null;
    }

    if (data.choices && data.choices.length > 0) {
      return data.choices[0].message.content.trim();
    } else {
      console.error('Unexpected response format:', data);
      return null;
    }
  } catch (error) {
    console.error('Error generating code suggestion:', error);
    return null;
  }
};```

## ./src/styles/main.css

```
css
```

```
body, html {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  background-color: #1e1e1e;
  color: #d4d4d4;
}

#root {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.app {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: #252526;
}

.editor-chat-container {
  display: flex;
  width: 100%;
  height: calc(100vh - 80px);
  overflow: hidden;
}

.editor {
  flex: 1;
  margin-right: 20px;
}

.chat {
  flex: 0 0 390px; 
  overflow: hidden;
}

.error-marker {
  background-color: rgba(255, 0, 0, 0.2);
}

.error-glyph {
  background-color: red;
  color: white;
  font-weight: bold;
  padding: 2px;
  border-radius: 50%;
  cursor: pointer;
}

.api-key-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 10px;
}

.api-key-container h2 {
  font-size: 24px;
  margin-bottom: 10px;
}

.api-key-container form {
  display: flex;
  align-items: center;
}

.api-key-input {
  padding: 5px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-right: 10px;
  width: 300px;
}

.api-key-submit {
  padding: 5px 10px;
  font-size: 14px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.api-key-submit:hover {
  background-color: #0056b3;
}

.suggestion-line {
  background-color: rgba(128, 128, 128, 0.1);
}

.inline-suggestion {
  display: inline-block;
  background-color: rgba(128, 128, 128, 0.2);
  border-radius: 2px;
  padding: 0 2px;
  color: grey; 
  font-style: italic;
  background-color: grey;
  z-index: 100;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "HelveticaNeue-Light", system-ui, "Ubuntu", "Droid Sans", sans-serif
}```

## ./src/index.js

```
javascript
```

```
import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';
import './styles/main.css';

ReactDOM.render(<App />, document.getElementById('root'));```

## ./src/index.html

```
html
```

```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>XML Editor Project</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>```

## ./src/components/Editor/CodeSuggester.js

```
javascript
```

```
import * as monaco from 'monaco-editor';
import { generateCodeSuggestion } from '../../api/openai';

class CodeSuggester {
  constructor(editor, apiKey) {
    this.editor = editor;
    this.apiKey = apiKey;
    this.decorationIds = [];
    this.suggestionTimeout = null;
    this.suggestionDelay = 500; // Delay in milliseconds before triggering suggestion
  }

  registerCommentTrigger() {
    this.editor.onDidChangeCursorPosition(async (event) => {
      const model = this.editor.getModel();
      const position = event.position;
      const line = model.getLineContent(position.lineNumber);

      if (line.trim().startsWith('//') || line.trim().startsWith('<!--')) {
        clearTimeout(this.suggestionTimeout);
        this.suggestionTimeout = setTimeout(async () => {
          const comment = line.trim().startsWith('//') ? line.slice(2).trim() : line.slice(4, -3).trim();
          const range = new monaco.Range(position.lineNumber, 1, position.lineNumber, model.getLineMaxColumn(position.lineNumber));
          const suggestion = await this.generateContextAwareCodeSuggestion(comment, model.getValue(), position);

          this.displaySuggestion(range, suggestion);
        }, this.suggestionDelay);
      } else {
        this.removeSuggestion();
      }
    });
  }

  registerInlineCompletion() {
    monaco.languages.registerCompletionItemProvider('xml', {
      provideCompletionItems: async (model, position) => {
        const textUntilPosition = model.getValueInRange({
          startLineNumber: position.lineNumber,
          startColumn: 1,
          endLineNumber: position.lineNumber,
          endColumn: position.column,
        });

        // Only trigger inline completion if the user has typed at least 3 characters
        if (textUntilPosition.length >= 3) {
          const suggestion = await this.generateContextAwareCodeSuggestion(textUntilPosition, model.getValue(), position);

          if (suggestion) {
            return {
              suggestions: [
                {
                  label: 'Code Suggestion',
                  kind: monaco.languages.CompletionItemKind.Snippet,
                  insertText: suggestion,
                  range: new monaco.Range(position.lineNumber, position.column, position.lineNumber, position.column),
                },
              ],
            };
          }
        }

        return { suggestions: [] };
      },
    });
  }

  async generateContextAwareCodeSuggestion(prompt, context, position) {
    const model = this.editor.getModel();

    if (model) {
      const surroundingCode = this.getSurroundingCode(position);
      const previousLine = this.getPreviousLine(position);
      const nextLine = this.getNextLine(position);

      const enhancedPrompt = `
        Generate code suggestion for the following prompt in the context of the provided code snippet:

        Language: XML (Azure API Management policy code)

        Prompt: ${prompt}

        Context:
        ${context}

        Surrounding Code:
        ${surroundingCode}

        Previous Line:
        ${previousLine}

        Next Line:
        ${nextLine}

        Considerations:
        - Only reply with the code snippet, no comments, no explanations.
        - Only generate code that can be inserted as-is at the current line. Don't generate any surrounding code.
        - Ensure the generated code is syntactically correct and fits well within the existing code structure.
        - Use appropriate variable names, function names, and coding conventions based on the surrounding code.
        - Consider the context and purpose of the code snippet to provide meaningful suggestions.
        - If the prompt is ambiguous or lacks sufficient context, provide a best-effort suggestion or indicate that more information is needed.
      `;

      return generateCodeSuggestion(enhancedPrompt, context, this.apiKey);
    }

    return null;
  }

  getSurroundingCode(position) {
    const model = this.editor.getModel();
    const startLineNumber = Math.max(1, position.lineNumber - 5);
    const endLineNumber = Math.min(model.getLineCount(), position.lineNumber + 5);

    return model.getValueInRange({
      startLineNumber,
      startColumn: 1,
      endLineNumber,
      endColumn: model.getLineMaxColumn(endLineNumber),
    });
  }

  getPreviousLine(position) {
    const model = this.editor.getModel();
    const previousLineNumber = position.lineNumber - 1;

    if (previousLineNumber >= 1) {
      return model.getLineContent(previousLineNumber);
    }

    return '';
  }

  getNextLine(position) {
    const model = this.editor.getModel();
    const nextLineNumber = position.lineNumber + 1;

    if (nextLineNumber <= model.getLineCount()) {
      return model.getLineContent(nextLineNumber);
    }

    return '';
  }

  displaySuggestion(range, suggestion) {
    if (!suggestion) {
        return;
    }
    if (suggestion.trim() === '') {
        return;
    }

    const lineNumber = range.startLineNumber;
    const column = range.startColumn;
    const suggestionLineNumber = lineNumber + 1;
    const indentationLength = this.editor.getModel().getLineFirstNonWhitespaceColumn(lineNumber) - 1;
    const indentation = ' '.repeat(indentationLength);

    const decorations = [
        {
        range: new monaco.Range(suggestionLineNumber, 1, suggestionLineNumber, suggestion.length + indentationLength + 1),
        options: {
            isWholeLine: true,
            className: 'suggestion-line'
        },
        },
    ];



    this.removeSuggestion();
    this.decorationIds = this.editor.deltaDecorations([], decorations);
    // set innerHTML of .suggestion-line to suggestion
    const element = document.querySelector('.suggestion-line');
    element.innerHTML = suggestion;


    this.editor.addCommand(monaco.KeyCode.Tab, () => {
        if (this.lastPastedSuggestion === suggestion) {
            this.editor.trigger('keyboard', 'type', { text: '\t' });
            return;
        }
        this.lastPastedSuggestion = suggestion;
        this.editor.executeEdits('', [
        {
            range: new monaco.Range(suggestionLineNumber, 1, suggestionLineNumber, 1),
            text: indentation + suggestion + '\n',
        },
        ]);

        this.removeSuggestion();
    });
  }
  removeSuggestion() {
    if (this.decorationIds.length > 0) {
      this.editor.deltaDecorations(this.decorationIds, []);
      this.decorationIds = [];
    }
  }
}

export default CodeSuggester;```

## ./src/components/Editor/MonacoTheme.js

```
javascript
```

```
const MonacoTheme = {
  base: 'vs-dark',
  inherit: true,
  rules: [
    // Add any custom theme rules here
  ],
  colors: {
    'editor.background': '#1e1e1e',
    'editor.foreground': '#d4d4d4',
    'editorLineNumber.foreground': '#858585',
    'editorCursor.foreground': '#d4d4d4',
    'editor.selectionBackground': '#264f78',
    'editor.inactiveSelectionBackground': '#3a3d41',
    'editorWidget.background': '#252526',
    'editorWidget.border': '#454545',
    'editorSuggestWidget.background': '#252526',
    'editorSuggestWidget.border': '#454545',
    'editorSuggestWidget.foreground': '#d4d4d4',
    'editorSuggestWidget.highlightForeground': '#0097fb',
    'editorSuggestWidget.selectedBackground': '#264f78',
    'editorHoverWidget.background': '#252526',
    'editorHoverWidget.border': '#454545',
    'editorGutter.background': '#1e1e1e',
    'editorGutter.modifiedBackground': '#0097fb',
    'editorGutter.addedBackground': '#487e02',
    'editorGutter.deletedBackground': '#f44747',
  },
};

export default MonacoTheme;```

## ./src/components/Editor/XmlValidator.js

```
javascript
```

```
import policySnippets from './PolicySnippets';
import PositionCalculator from './PositionCalculator';

class XmlValidator {
  constructor(editor, monaco) {
    this.editor = editor;
    this.monaco = monaco;
    this.positionCalculator = new PositionCalculator();
  }

  validate() {
    const value = this.editor.getValue();
    const xmlDoc = new DOMParser().parseFromString(value, 'text/xml');
    const errors = [];

    // Check if the expected structure is present
    const requiredElements = ['inbound', 'backend', 'outbound', 'on-error'];
    requiredElements.forEach(element => {
      if (!xmlDoc.querySelector(`policies > ${element}`)) {
        errors.push({
          severity: this.monaco.MarkerSeverity.Error,
          message: `Missing required element: <${element}>`,
          startLineNumber: 1,
          startColumn: 1,
          endLineNumber: 1,
          endColumn: 1,
        });
      }
    });

    // Check for unknown attributes in policy snippets
    policySnippets.forEach(snippet => {
      const elements = xmlDoc.getElementsByTagName(snippet.label);
      for (let i = 0; i < elements.length; i++) {
        const element = elements[i];
        const allowedAttributes = snippet.attributes || [];
        for (let j = 0; j < element.attributes.length; j++) {
          const attribute = element.attributes[j];
          if (!allowedAttributes.includes(attribute.name)) {
            const lineNumber = this.positionCalculator.getLineNumber(value, element);
            const startColumn = this.positionCalculator.getColumnNumber(value, element, attribute.name);
            errors.push({
              severity: this.monaco.MarkerSeverity.Error,
              message: `Unknown attribute: ${attribute.name}`,
              startLineNumber: lineNumber,
              startColumn: startColumn,
              endLineNumber: lineNumber,
              endColumn: startColumn + attribute.name.length,
            });
          }
        }
      }
    });

    // Set the markers for errors
    this.monaco.editor.setModelMarkers(this.editor.getModel(), 'xml', errors);

    // Display error details in the editor's gutter
    errors.forEach(error => {
      const startPosition = new this.monaco.Position(error.startLineNumber, error.startColumn);
      const endPosition = new this.monaco.Position(error.endLineNumber, error.endColumn);
      const range = new this.monaco.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);
      this.editor.deltaDecorations([], [
        {
          range,
          options: {
            isWholeLine: false,
            className: 'error-marker',
            glyphMarginClassName: 'error-glyph',
            glyphMarginHoverMessage: {
              value: error.message,
            },
          },
        },
      ]);
    });
  }
}

export default XmlValidator;```

## ./src/components/Editor/EditorInitializer.js

```
javascript
```

```
class EditorInitializer {
  constructor(monaco, editorRef, theme) {
    this.monaco = monaco;
    this.editorRef = editorRef;
    this.theme = theme;
  }

  initialize() {
    const editor = this.monaco.editor.create(this.editorRef, {
      automaticLayout: true,
      fontSize: 16,
      language: 'xml',
      value: '<policies>\n  <inbound>\n    </inbound>\n  <backend>\n    </backend>\n  <outbound>\n    \n  </outbound>\n  <on-error>\n    \n  </on-error>\n</policies>'.replace(/\n\s+/g, '\n'),
      minimap: { enabled: true },
    });

    this.monaco.editor.defineTheme('customTheme', this.theme);
    this.monaco.editor.setTheme('customTheme');

    return editor;
  }
}

export default EditorInitializer;```

## ./src/components/Editor/PolicySnippets.js

```
javascript
```

```
const policySnippets = [
  {
    label: 'validate-azure-ad-token',
    documentation: 'Validates Azure AD token.',
    insertText: [
      '<validate-azure-ad-token',
      '    tenant-id="${1:tenant ID or URL (e.g., contoso.onmicrosoft.com)}"',
      '    header-name="${2:name of HTTP header containing the token}"',
      '    failed-validation-httpcode="${3:HTTP status code to return on failure}"',
      '    failed-validation-error-message="${4:error message to return on failure}"',
      '    output-token-variable-name="${5:name of a variable to receive a JWT object}">',
      '    <client-application-ids>',
      '        <application-id>${6:Client application ID}</application-id>',
      '    </client-application-ids>',
      '</validate-azure-ad-token>'
    ].join('\n'),
    attributes: ['tenant-id', 'header-name', 'failed-validation-httpcode', 'failed-validation-error-message', 'output-token-variable-name'],
  },
  {
    label: 'set-header',
    documentation: 'Sets a response header.',
    insertText: [
      '<set-header name="${1:header name}" exists-action="override">',
      '    <value>@(${2:expression to evaluate})</value>',
      '</set-header>'
    ].join('\n'),
    attributes: ['name', 'exists-action'],
  },
  {
    label: 'set-query-parameter',
    documentation: 'Sets a query parameter to the specified value.',
    insertText: [
      '<set-query-parameter name="${1:query parameter name}" exists-action="override">',
      '    <value>@(${2:expression to evaluate})</value>',
      '</set-query-parameter>'
    ].join('\n'),
    attributes: ['name', 'exists-action'],
  },
  {
    label: 'rewrite-uri',
    documentation: 'Converts an incoming request URL from its public format to the format expected by the web service.',
    insertText: [
      '<rewrite-uri template="${1:URI template}" />'
    ].join('\n'),
    attributes: ['template'],
  },
  {
    label: 'cors',
    documentation: 'Adds cross-origin resource sharing (CORS) support to an operation or an API to allow cross-domain calls from browser-based clients.',
    insertText: [
      '<cors>',
      '    <allowed-origins>',
      '        <origin>${1:origin URL}</origin>',
      '    </allowed-origins>',
      '    <allowed-methods preflight-result-max-age="${2:max age in seconds}">${3:comma-separated list of HTTP methods}</allowed-methods>',
      '    <allowed-headers>${4:comma-separated list of headers}</allowed-headers>',
      '    <expose-headers>${5:comma-separated list of headers}</expose-headers>',
      '</cors>'
    ].join('\n'),
    attributes: ['preflight-result-max-age'],
  },
  {
    label: 'xml-to-json',
    documentation: 'Converts request or response body from XML to JSON.',
    insertText: [
      '<xml-to-json kind="javascript-object">',
      '    <output-variable name="${1:variable name}" />',
      '</xml-to-json>'
    ].join('\n'),
    attributes: ['kind'],
  },
  {
    label: 'json-to-xml',
    documentation: 'Converts request or response body from JSON to XML.',
    insertText: [
      '<json-to-xml>',
      '    <output-variable name="${1:variable name}" />',
      '</json-to-xml>'
    ].join('\n'),
    attributes: [],
  },
  {
    label: 'base64-encode',
    documentation: 'Encodes the content of the specified variable or the current message body as a base64 string.',
    insertText: [
      '<base64-encode>',
      '    <value>${1:expression to encode}</value>',
      '    <output-variable name="${2:variable name}" />',
      '</base64-encode>'
    ].join('\n'),
    attributes: [],
  },
  {
    label: 'base64-decode',
    documentation: 'Decodes the content of the specified variable or the current message body that is base64 encoded.',
    insertText: [
      '<base64-decode>',
      '    <value>${1:expression to decode}</value>',
      '    <output-variable name="${2:variable name}" />',
      '</base64-decode>'
    ].join('\n'),
    attributes: [],
  },
];

export default policySnippets;```

## ./src/components/Editor/MonacoXMLEditor.js

```
javascript
```

```
import React, { useRef, useEffect } from 'react';
import * as monaco from 'monaco-editor';
import EditorInitializer from './EditorInitializer';
import CompletionProvider from './CompletionProvider';
import XmlValidator from './XmlValidator';
import MonacoTheme from './MonacoTheme';
import CodeSuggester from './CodeSuggester';

const MonacoXMLEditor = ({ apiKey }) => {
  const editorRef = useRef(null);

  useEffect(() => {
    if (editorRef.current) {
      const initializer = new EditorInitializer(monaco, editorRef.current, MonacoTheme);
      const editor = initializer.initialize();

      const completionProvider = new CompletionProvider(monaco);
      completionProvider.register();

      const validator = new XmlValidator(editor, monaco);
      editor.onDidChangeModelContent(() => {
        validator.validate();
      });

      const codeSuggester = new CodeSuggester(editor, apiKey);
      codeSuggester.registerCommentTrigger();
      codeSuggester.registerInlineCompletion();

      return () => editor.dispose();
    }
  }, [apiKey]);

  return <div ref={editorRef} className="monaco-editor" style={{ height: '100%', width: '100%' }} />;
};

export default MonacoXMLEditor;```

## ./src/components/Editor/PositionCalculator.js

```
javascript
```

```
class PositionCalculator {
  getLineNumber(value, element) {
    const lines = value.split('\n');
    const index = value.indexOf(element.outerHTML);
    let lineNumber = 1;
    let currentIndex = 0;
    for (let i = 0; i < lines.length; i++) {
      currentIndex += lines[i].length + 1;
      if (currentIndex > index) {
        lineNumber = i + 1;
        break;
      }
    }
    return lineNumber;
  }

  getColumnNumber(value, element, attributeName) {
    const lines = value.split('\n');
    const lineNumber = this.getLineNumber(value, element);
    const line = lines[lineNumber - 1];
    const attributeIndex = line.indexOf(attributeName);
    return attributeIndex + 1;
  }
}

export default PositionCalculator;```

## ./src/components/Editor/CompletionProvider.js

```
javascript
```

```
import policySnippets from './PolicySnippets';

class CompletionProvider {
  constructor(monaco) {
    this.monaco = monaco;
  }

  register() {
    this.monaco.languages.registerCompletionItemProvider('xml', {
      provideCompletionItems: () => {
        const suggestions = policySnippets.map(snippet => ({
          label: snippet.label,
          kind: this.monaco.languages.CompletionItemKind.Snippet,
          insertText: snippet.insertText,
          insertTextRules: this.monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
          documentation: snippet.documentation,
        }));

        return { suggestions };
      }
    });
  }
}

export default CompletionProvider;```

## ./src/components/App.js

```
javascript
```

```
import React, { useState } from 'react';
import MonacoXMLEditor from './Editor/MonacoXMLEditor';
import ChatBox from './Chat/ChatBox';

const App = () => {
  const [apiKey, setApiKey] = useState(localStorage.getItem('apiKey') || '');

  const handleApiKeyChange = (event) => {
    setApiKey(event.target.value);
  };

  const handleApiKeySubmit = (event) => {
    event.preventDefault();
    localStorage.setItem('apiKey', apiKey);
  };

  return (
    <div className="app">
      <div className="api-key-container">
        <form onSubmit={handleApiKeySubmit}>
          <input
            type="password"
            value={apiKey}
            onChange={handleApiKeyChange}
            placeholder="Enter your OpenAI API key"
            className="api-key-input"
          />
          <button type="submit" className="api-key-submit">Set API Key</button>
        </form>
      </div>
      <div className="editor-chat-container">
        <div className="editor">
          <MonacoXMLEditor apiKey={apiKey} />
        </div>
        <div className="chat">
          <ChatBox />
        </div>
      </div>
    </div>
  );
};

export default App;```

## ./src/components/Chat/ChatBox.js

```
javascript
```

```
import React, { useState, useEffect } from 'react';
import Message from './Message';
import './ChatBox.css';

const ChatBox = () => {
  const [messages, setMessages] = useState([]);
  const [currentInput, setCurrentInput] = useState('');

  const handleInputChange = (e) => {
    setCurrentInput(e.target.value);
  };

  const handleSendMessage = () => {
    if (currentInput.trim() === '') {
      return;
    }
    setMessages([...messages, { type: 'user', text: currentInput }]);
    setCurrentInput('');

    // Simulate a bot response
    setTimeout(() => {
      setMessages((msgs) => [
        ...msgs,
        { type: 'bot', text: 'This is a simulated response.' },
      ]);
    }, 1000);
  };

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        handleSendMessage();
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, [currentInput, messages]);

  return (
    <div className="chat-box">
      <div className="messages">
        {messages.map((message, index) => (
          <Message key={index} text={message.text} type={message.type} />
        ))}
      </div>
      <div className="input-area">
        <input
          type="text"
          value={currentInput}
          onChange={handleInputChange}
          placeholder="Type a message..."
        />
        <button onClick={handleSendMessage}>Send</button>
      </div>
    </div>
  );
};

export default ChatBox;```

## ./src/components/Chat/Message.js

```
javascript
```

```
import React from 'react';

const Message = ({ text, type }) => {
  return (
    <div className={`message ${type}`}>
      {text}
    </div>
  );
};

export default Message;```

## ./src/components/Chat/ChatBox.css

```
css
```

```
.chat-box {
  display: flex;
  flex-direction: column;
  height: 100%;
  border: 1px solid #454545;
  border-radius: 4px;
  background-color: #252526;
  color: #d4d4d4;
}

.messages {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px;
}

.message {
  margin-bottom: 10px;
  padding: 8px 12px;
  border-radius: 8px;
  max-width: 70%;
}

.message.user {
  align-self: flex-end;
  background-color: #264f78;
  color: #d4d4d4;
}

.message.bot {
  align-self: flex-start;
  background-color: #3a3d41;
  color: #d4d4d4;
}

.input-area {
  display: flex;
  padding: 10px;
  border-top: 1px solid #454545;
  background-color: #1e1e1e;
}

.input-area input {
  flex-grow: 1;
  margin-right: 10px;
  padding: 8px;
  border: 1px solid #454545;
  border-radius: 4px;
  background-color: #252526;
  color: #d4d4d4;
}

.input-area button {
  padding: 8px 16px;
  background-color: #264f78;
  color: #d4d4d4;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.inline-suggestion {
  display: inline-block;
  background-color: rgba(128, 128, 128, 0.2);
  border-radius: 2px;
  padding: 0 2px;
}

.after-suggestion {
  display: inline-block;
  color: grey;
  font-style: italic;
  padding-left: 2px;
}```

